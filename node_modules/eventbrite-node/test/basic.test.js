require('./helpers.js');
var config = require('./config');
var responses = require('./requests');



require('blanket')({
  pattern: function(filename) {
    return !/node_modules/.test(filename);
  }
});

var Eventbrite = require('../');



describe('Init', function() {

  it('should set parameters', function(done) {
    var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);

    expect(eventbrite.clientKey).to.equal(config.clientKey);
    expect(eventbrite.clientSecret).to.equal(config.clientSecret);
    expect(eventbrite.accessToken).to.equal(null);

    done();
  });

  it('should be null', function() {
    var eventbrite = new Eventbrite();

    expect(eventbrite.clientKey).to.equal(null);
    expect(eventbrite.clientSecret).to.equal(null);
    expect(eventbrite.accessToken).to.equal(null);
  });

  it('should be object', function() {
    var eventbrite = Eventbrite(config.clientKey, config.clientSecret);

    expect(eventbrite).to.be.a('object');
  });
});

describe('Authorization', function() {

  describe('OAuth url', function() {
    it('should return oauth url', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);

      expect(eventbrite.getOAuthUrl()).to.equal('https://www.eventbrite.com/oauth/authorize?response_type=code&client_id=' + config.clientKey);
    });

    it('should throw exception', function() {
      var eventbrite = new Eventbrite();

      expect(eventbrite.getOAuthUrl.bind(eventbrite)).to.throw('The value of clientKey is not set');
    });
  });

  describe('Access token', function() {
    it('should allow set access token', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);
      eventbrite.setAccessToken(config.accessToken);
      expect(eventbrite.accessToken).to.equal(config.accessToken);
    });

    it('should exchange code to access token', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);

      eventbrite.authorize(config.code, function(err, response) {
        expect(eventbrite.accessToken).to.equal(config.accessToken);
        expect(response.access_token).to.equal(config.accessToken);
        expect(err).to.equal(null);
      });
    });

    it('should return error', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);

      eventbrite.authorize('12', function(err, response) {
        expect(eventbrite.accessToken).to.equal(null);
        expect(response).to.equal(undefined);
        expect(err).to.not.equal(null);
      });
    })

    it('should throw exception', function() {
      var eventbrite = new Eventbrite();

      expect(eventbrite.authorize.bind(eventbrite)).to.throw('The value of clientKey is not set');

      eventbrite = new Eventbrite(config.clientKey);
      expect(eventbrite.authorize.bind(eventbrite)).to.throw('The value of clientSecret is not set');

    })
  });

  describe('API calls', function() {

    it('should throw exception', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);

      expect(eventbrite.get.bind(eventbrite)).to.throw('The value of access token is not set');
      expect(eventbrite.post.bind(eventbrite)).to.throw('The value of access token is not set');
    })

    it('should call api', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);
      eventbrite.setAccessToken(config.accessToken);

      eventbrite.get('/users/me', function(err, response) {
        expect(response).to.equal(responses['/users/me']);
        expect(err).to.equal(null);
      });

      eventbrite.post('/users/1/contact_lists', { name: 'Last Event Attendees' }, function(err, response) {
        expect(response).to.equal(responses['/users/1/contact_lists']);
        expect(err).to.equal(null);
      });

    });

    it('should return error', function() {
      var eventbrite = new Eventbrite(config.clientKey, config.clientSecret);
      eventbrite.setAccessToken(config.accessToken);

      eventbrite.get('/users/m', function(err, response) {
        expect(response).to.equal(undefined);
        expect(err).to.not.equal(null);
      });

      eventbrite.post('/users/me', function(err, response) {
        expect(response).to.equal(undefined);
        expect(err).to.not.equal(null);
      });
    })
  });

});